@using Microsoft.Extensions.Logging

@inject ILogger<ExecutionModal> Logger

@if (_isExecuting)
{
    <div class="modal fade show" id="executingModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h4 class="modal-title">Loading</h4>
                </div>

                <div class="modal-body">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Please wait</span>
                    </div>
                    <span class="px-3"></span>Please wait for operation to finish.
                </div>
            </div>
        </div>
    </div>
}
else if (_errorMessage != null)
{
    <div class="modal fade show" id="errorModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Error</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <label>
                        @_errorMessage
                    </label>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-dark" @onclick=@HideDialog>Ok</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private string _errorMessage;
    private bool _isExecuting;
    
    public void ExecuteOperation(Action operation, Action<Exception> onFailure = null)
    {
        _isExecuting = true;
        StateHasChanged();
        
        Task.Run(async () =>
        {
            try
            {
                await InvokeAsync(operation);
            }
            catch (Exception e)
            {
                Logger.LogError(e, "An error occured during execution \"{message}\".", e.Message);
                
                _errorMessage = $"An error occured during execution \"{e.Message}\".";

                await InvokeAsync(() =>
                {
                   onFailure?.Invoke(e);     
                });
            }

            _isExecuting = false;
            await InvokeAsync(StateHasChanged);
        });
    }

    private void HideDialog()
    {
        _errorMessage = null;
    }
}