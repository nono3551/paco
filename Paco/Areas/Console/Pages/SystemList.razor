@using Paco.Data.Entities
@using System.Collections.Generic
@inject ApplicationDbContext ApplicationDbContext
@inject Paco.Services.SystemManagerService ManagerService

@page "/systems/list"
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Hostname</th>
            <th>Last Accessed</th>
            <th>Updates fetched at</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var system in _systems)
        {
            <tr @onclick="() => ToggleSystemDetail(system)" style='cursor: pointer;'>
                <td>
                    @system.Name
                </td>
                <td>
                    @system.Hostname
                </td>
                <td>
                    @system.LastAccessed
                </td>
                <td>
                    @(system.UpdatesFetchedAt.ToString() ?? "Never")
                </td>
            </tr>
            @if (ShouldShowDetailForSystem(system))
            {
                <tr role="row" class="b-table-details">
                    <td colspan="4" class="">
                        <div class="card">
                            <div class="card-body">
                                @if (system.SystemInformation == null)
                                {
                                    RefreshSystemInformation(system);
                                }
                                else
                                {
                                    @foreach (var entry in System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(system.SystemInformation))
                                    {
                                        <div class="row mb-2">
                                            <div class="text-sm-right col-sm-3"><b>@entry.Key:</b></div>
                                            <div class="col">
                                                <p style="white-space: pre-line">@entry.Value</p>
                                            </div>
                                        </div>
                                    }
                                }

                                <button type="button" class="btn btn-dark" @onclick="() => HideDetail(system)">Hide Details</button>
                                <button type="button" class="btn btn-dark" @onclick="() => RefreshSystemInformation(system)">Refresh</button>
                                <button type="button" class="btn btn-dark" @onclick="() => FetchSystemUpdates(system)">Fetch updates</button>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<ManagedSystem> _systems;
    private List<ManagedSystem> _systemsWithDetailOpened = new List<ManagedSystem>();

    protected override Task OnInitializedAsync()
    {
        _systems = ApplicationDbContext.ManagedSystems.ToList();

        return base.OnInitializedAsync();
    }

    public bool ShouldShowDetailForSystem(ManagedSystem system)
    {
        return _systemsWithDetailOpened.Contains(system);
    }

    public void HideDetail(ManagedSystem system)
    {
        _systemsWithDetailOpened.Remove(system);
    }

    public void ToggleSystemDetail(ManagedSystem system)
    {
        if (!_systemsWithDetailOpened.Contains(system))
        {
            _systemsWithDetailOpened.Add(system);
        }
        else
        {
            _systemsWithDetailOpened.Remove(system);
        }
    }

    private void RefreshSystemInformation(ManagedSystem system)
    {
        Task.Run(() =>
        {
            ManagerService.RefreshSystemInformation(system);
            base.InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        });
    }

    private void FetchSystemUpdates(ManagedSystem system)
    {
        Task.Run(() =>
        {
            ManagerService.FetchSystemUpdates(system);
            base.InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        });
    }
}