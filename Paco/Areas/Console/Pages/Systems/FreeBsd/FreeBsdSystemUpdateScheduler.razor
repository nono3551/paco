@using Paco.Entities.Models
@using Paco.Services
@using Paco.Entities.FreeBsd
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using Paco.Entities
@using Paco.Entities.FreeBsd.PackagesActions
@using Paco.Entities.Models.Updating
@using Paco.Repositories.Database
@using Sentry.Protocol

@inject SystemManagerService SystemManagerService
@inject IJSRuntime JsRuntime
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

@if (_showModal)
{
    <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">@_system.Name</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    @if (!_updateInfo.HasUpdate)
                    {
                        <p>There is no newer update for this system.</p>
                    }
                    else
                    {
                        <p>@_updateInfo.Description</p>

                        @if (_updateInfo.CanUpdate)
                        {
                            <FormInput InputType="time" @bind-Value="@TimeProxy"/>
                            <FormInput InputType="date" @bind-Value="@DateProxy"/>
                        }
                    }

                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@(CloseModal)">Back</button>
                    @if (_updateInfo.CanUpdate)
                    {
                        <button type="button" class="btn btn-dark" @onclick=@ScheduleUpdate>Schedule</button>
                    }
                </div>
            </div>
        </div>
    </div>
}
<ExecutionModal @ref="@_executionModal"/>

@code
{
    private SystemUpdateInfo _updateInfo;
    private bool _showModal;
    private ManagedSystem _system;
    private ExecutionModal _executionModal;

    private DateTime _scheduleDate = DateTime.UtcNow.Date;

    private string DateProxy
    {
        get => _scheduleDate.ToString("yyyy-MM-dd");
        set => DateTime.TryParse(value, out _scheduleDate);
    }

    private TimeSpan _scheduleTime = TimeSpan.FromMinutes(Math.Floor(DateTime.Now.TimeOfDay.TotalMinutes));

    private string TimeProxy
    {
        get => _scheduleTime.ToString();
        set => TimeSpan.TryParse(value, out _scheduleTime);
    }

    public void ShowModal(ManagedSystem managedSystem)
    {
        _executionModal.ExecuteOperation(() =>
        {
            _system = managedSystem;
            _updateInfo = SystemManagerService.GetSystemUpdateInfo(managedSystem);
            _showModal = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private void CloseModal()
    {
        _showModal = false;
        _system = null;
        InvokeAsync(StateHasChanged);
    }

    private void ScheduleUpdate()
    {
        _executionModal.ExecuteOperation(async () =>
        {
            var packagesAction = new ScheduledAction()
            {
                ScheduledActionType = ScheduledActionType.System,
                ScheduledAt = _scheduleDate + _scheduleTime + TimeSpan.FromMinutes(await JsRuntime.InvokeAsync<int>("blazorGetTimezoneOffset")),
                ManagedSystemId = _system.Id
            };

            DbContextFactory.Upsert(packagesAction);

            CloseModal();
        });
    }
}