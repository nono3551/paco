@using Paco.Entities.Models
@using Paco.Services
@using Paco.Entities.FreeBsd
@using System.ComponentModel.DataAnnotations
@using System.Globalization

@inject SystemManagerService SystemManagerService
@inject IJSRuntime JsRuntime

@if (_showModal)
{
    if (_shouldErrorDialogBeVisible)
    {
        <ErrorModal @bind-ShouldBeVisible="@_shouldErrorDialogBeVisible" ErrorMessage="@_lastError"/>
    }
    else if (_scheduling)
    {
        <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Update @_system.Name</h4>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">
                        <FormInput InputType="time" @bind-Value="@TimeProxy"/>
                        <FormInput InputType="date" @bind-Value="@DateProxy"/>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@(() => { _scheduling = false; })">Back</button>
                        <button type="button" class="btn btn-dark" @onclick=@ScheduleUpdate>Schedule</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (_currentPackageAction == null)
    {
        <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Update @_system.Name</h4>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">

                        @if (_packagesActions != null)
                        {
                            @foreach (PackageAction update in _packagesActions)
                            {
                                var background = "";
                                var tooltipMessage = "Looks great!";

                                var problems = update.GetOptionsProblems();
                                if (problems.Any())
                                {
                                    background = "error-background";
                                    tooltipMessage = string.Join("\n", problems);
                                }

                                <div class="@background my-2 py-2 ps-3" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@tooltipMessage">
                                    @update?.Description <span style="float: right;" class="oi bi-gear clickable px-3" aria-hidden="true" @onclick="() => OpenPackageActionSettings(update)"></span>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Loading...</p>
                        }

                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@CloseModal">Cancel</button>
                        <button type="button" class="btn btn-dark" @onclick=@PrepareUpdate>Continue</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">@_currentPackageAction.NewVersion options</h4>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">
                        @if (_currentPackageAction.SimpleOptions?.Any() == true)
                        {
                            @foreach (var option in _currentPackageAction.SimpleOptions)
                            {
                                var isChecked = (OptionSetStatus.Set.HasFlag(option.Status));

                                <div class="form-check py-1">
                                    <input class="checkbox form-check-input" type="checkbox" id="flexCheckDefault-@option.Name" checked=@isChecked @onchange="@(eventArgs => { OnOptionChanged(option, eventArgs.Value); })">
                                    <div style="display: block">
                                        <label class="form-check-label" for="flexCheckDefault-@option.Name">
                                            @option.Name
                                        </label>

                                        @if (option.Status == OptionSetStatus.Undefined)
                                        {
                                            <span class="badge bg-dark" style="float: right">New</span>
                                        }
                                    </div>

                                    <small class="form-text text-muted">@option.Description</small>
                                </div>
                            }

                            @foreach (var group in _currentPackageAction.OptionsGroups)
                            {
                                <div class="py-1">
                                    <label style="display: block">
                                        @group.Name
                                    </label>
                                    <small class="form-text text-muted">@group.Description</small>

                                    <div class="form-check">
                                        @foreach (var option in @group.Options)
                                        {
                                            var checkedStatus = (OptionSetStatus.Set.HasFlag(option.Status));
                                            var id = $"{group.Name}-{option.Name}";

                                            <div class="form-check pt-2">
                                                <input class="form-check-input" type="checkbox" id="@id" checked="@checkedStatus" @onchange="@(eventArgs => { OnGroupOptionChanged(group, option, eventArgs.Value); })">
                                                <label class="form-check-label" style="display: block" for="@id">@option.Name</label>
                                                <small class="form-text text-muted">@option.Description</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-dark" @onclick=@OnApplyOptionsSettings>Apply</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code
{
    private bool _showModal = false;
    private ManagedSystem _system;
    private IEnumerable<object> _packagesActions = null;
    private PackageAction _currentPackageAction = null;
    private bool _shouldErrorDialogBeVisible = false;
    private string _lastError = null;
    private bool _scheduling = false;
    
    private DateTime _scheduleDate = DateTime.UtcNow.Date;
    private string DateProxy
    {
        get => _scheduleDate.ToString("yyyy-MM-dd");
        set => DateTime.TryParse(value, out _scheduleDate);
    }

    private TimeSpan _scheduleTime = TimeSpan.FromMinutes(Math.Floor(DateTime.Now.TimeOfDay.TotalMinutes));
    private string TimeProxy
    {
        get => _scheduleTime.ToString();
        set => TimeSpan.TryParse(value, out _scheduleTime);
    }

    private async Task CalculateFinalDate()
    {
        var offset = TimeSpan.FromMinutes(await JsRuntime.InvokeAsync<int>("blazorGetTimezoneOffset"));
        var finalScheduledDate = _scheduleDate + offset + _scheduleTime;

        return;
    }

    public void ShowModal(ManagedSystem managedSystem)
    {
        _system = managedSystem;
        _showModal = true;
        StateHasChanged();

        Task.Run(() =>
        {
            _packagesActions = SystemManagerService.GetPackagesActions(_system);
            InvokeAsync(StateHasChanged);
        });
    }

    void OpenPackageActionSettings(PackageAction packageAction)
    {
        _currentPackageAction = packageAction;
        StateHasChanged();
    }

    private void OnOptionChanged(PackageOption option, object value)
    {
        option.Status = true.Equals(value) ? OptionSetStatus.Set : OptionSetStatus.IsUnset;
    }

    void CloseModal()
    {
        _showModal = false;
        _system = null;
        _packagesActions = null;
    }

    void PrepareUpdate()
    {
        var actions = _packagesActions as IEnumerable<PackageAction>;

        try
        {
            var problems = actions?.SelectMany(x => x.GetOptionsProblems()).ToList();

            if (problems?.Any() == true)
            {
                throw new ValidationException(string.Join("\n", problems));
            }

            SystemManagerService.PreparePackagesActions(_system, _packagesActions);

            _scheduling = true;
        }
        catch (Exception e)
        {
            _lastError = e.Message;
            _shouldErrorDialogBeVisible = true;
        }
    }


    private void OnApplyOptionsSettings()
    {
        _currentPackageAction.SetUndefinedOptionsAsUnset();

        var optionsProblems = _currentPackageAction.GetOptionsProblems();

        if (optionsProblems.Any())
        {
            _lastError = string.Join("\n", optionsProblems);
            _shouldErrorDialogBeVisible = true;
        }
        else
        {
            _currentPackageAction = null;
        }

        StateHasChanged();
    }

    private async Task ScheduleUpdate()
    {
        await CalculateFinalDate();
    }

    private void OnGroupOptionChanged(PackageOptionsGroup @group, PackageOption option, object isChecked)
    {
        if (true.Equals(isChecked))
        {
            if (group.OptionsGroupType == OptionsGroupType.Single)
            {
                group.Options.Where(x => x != option).ToList().ForEach(x => x.Status = OptionSetStatus.Unset);
            }

            option.Status = OptionSetStatus.Set;
        }
        else
        {
            option.Status = OptionSetStatus.Unset;
        }

        StateHasChanged();
    }
}