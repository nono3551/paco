@page "/systemgroups/manage/{managedSystemGroupId:guid}"
@using Microsoft.EntityFrameworkCore
@using Paco.Entities.Models
@using Paco.Repositories.Database

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator")]
@if (ManagedSystemGroup == null)
{
    <p>System group not found</p>
}
else
{
    <h1>@(ManagedSystemGroup.Name)</h1>

    <FormInput ValueChanged="@OnSystemTermChanged" ElementId="SystemTerm" InputType="text" Placeholder="Search for system"/>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Added</th>
            <th style="text-align:center">Action</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var managedSystem in _systems)
        {
            var managedSystemManagedSystemGroup = managedSystem.ManagedSystemManagedSystemGroups.FirstOrDefault() ?? new ManagedSystemManagedSystemGroup()
            {
                ManagedSystemGroupId = ManagedSystemGroupId,
                ManagedSystemId = managedSystem.Id
            };

            var isAdded = managedSystem.ManagedSystemManagedSystemGroups.FirstOrDefault() != null;

            <tr>
                <td>
                    @managedSystem.Name
                </td>
                <td>
                    @(managedSystemManagedSystemGroup.CreatedAt.ToString() ?? "")
                </td>
                <td style="text-align:center">
                    <span @onclick="@(() => { if (isAdded){ OnRemoveAction(managedSystemManagedSystemGroup);} else { OnAddAction(managedSystemManagedSystemGroup);}})" class="oi @(isAdded ? "oi-trash" : "oi-plus")" style='cursor: pointer;'></span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public Guid ManagedSystemGroupId { get; set; }

    private ManagedSystemGroup ManagedSystemGroup { get; set; }

    private List<ManagedSystem> _systems;

    private string _systemTerm = "";

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();

        LoadData();
    }

    private void LoadData()
    {
        using var dbContext = DbFactory.CreateDbContext();

        ManagedSystemGroup = dbContext.ManagedSystemGroups.FirstOrDefault(x => x.Id == ManagedSystemGroupId);
        if (ManagedSystemGroup != null)
        {
            RefreshSystems();
        }
    }

    private void OnAddAction(object value)
    {
        DbFactory.Add(value);
        LoadData();
    }

    private void OnRemoveAction(object value)
    {
        DbFactory.Remove(value);
        LoadData();
    }

    private void RefreshSystems()
    {
        using var db = DbFactory.CreateDbContext();

        if (string.IsNullOrEmpty(_systemTerm?.Trim()))
        {
            _systems = db.ManagedSystems.GetManagedSystemsWithGroupPermissionsForGroup(ManagedSystemGroup);
        }
        else
        {
            _systems = db.ManagedSystems.GetManagedSystemsForTermWithGroupPermissionsForGroup(ManagedSystemGroup, _systemTerm);
        }
    }

    private void OnSystemTermChanged(string newTerm)
    {
        _systemTerm = newTerm;

        RefreshSystems();
    }
}