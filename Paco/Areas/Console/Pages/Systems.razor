@using Paco.Data.Entities
@using Renci.SshNet;
@inject ApplicationDbContext ApplicationDbContext

@page "/systems"

<h2>List of systems:</h2>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Hostname</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var system in _systems)
        {
            <tr>
                <td>
                    @system.Name
                </td>
                <td>
                    @system.Hostname
                </td>
                <td>
                    <button class="btn btn-dark" @onclick="@(() => Connect(system))">Connect</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ManagedSystem> _systems;

    protected override Task OnInitializedAsync()
    {
        _systems = ApplicationDbContext.ManagedSystems.ToList();

        return base.OnInitializedAsync();
    }

    private void Connect(ManagedSystem system)
    {
        byte[] expectedFingerPrint = new byte[] {
                                            0x66, 0x31, 0xaf, 0x00, 0x54, 0xb9, 0x87, 0x31,
                                            0xff, 0x58, 0x1c, 0x31, 0xb1, 0xa2, 0x4c, 0x6b
                                       };

        using (var client = new SshClient(system.Hostname, system.Login, system.Password))
        {
            client.HostKeyReceived += (sender, hostKeyArgs) =>
            {
                if (expectedFingerPrint.Length == hostKeyArgs.FingerPrint.Length)
                {
                    for (var i = 0; i < expectedFingerPrint.Length; i++)
                    {
                        if (expectedFingerPrint[i] != hostKeyArgs.FingerPrint[i])
                        {
                            hostKeyArgs.CanTrust = false;
                            break;
                        }
                    }
                }
                else
                {
                    hostKeyArgs.CanTrust = false;
                }

                //Todo: Fix this CanTrus set properly. Only for testing purposes
                hostKeyArgs.CanTrust = true;
            };
            client.Connect();

            var x = client.RunCommand("uname");

            client.Dispose();
        }
    }
}